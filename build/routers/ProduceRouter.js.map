{"version":3,"sources":["routers/ProduceRouter.js"],"names":["ProduceRouter","path","router","init","req","res","status","json","id","parseInt","params","record","find","item","message","received","body","newProduce","push","then","writePath","logger","relative","join","__dirname","catch","err","stack","searchId","parseId","payload","parseUpdate","toUpdate","Object","keys","forEach","key","Number","get","getAll","getById","post","postOne"],"mappings":"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","file":"ProduceRouter.js","sourcesContent":["// @flow\n\n\nimport inventory from '../../data/produce';\nimport { Router } from 'express';\n\nimport saveInventory, {genId} from '../util/save';\nimport { parseProduce } from '../util/parsers';\n\n\nexport default class ProduceRouter {\n  // these fields must be type annotated, or flow will complain.\n  router: Router;\n  path: string;\n\n  constructor(path = '/api/v1/produce') {\n    //instanciating the express router.\n    this.router = Router();\n    this.path = path;\n\n    //glueing it all together.\n    this.init();\n  }\n\n  /*\n    returning all items in the inventory - GET\n   */\n  getAll(req: $Request, res: $Response): void {\n    res.status(200).json(inventory);\n  }\n\n  /*\n    returning an item from the inventory by id - GET BY ID\n   */\n  getById(req: $Request, res:$Response): void {\n    const id = parseInt(req.params.id, 10);\n    const record = inventory.find(item => item.id === id);\n    if (record) {\n      res.status(200).json({\n        message: 'Succes!',\n        item: record\n      });\n    } else {\n      res.status(400).json({\n        status: res.status,\n        message: `No item found with id: ${id}`\n      });\n    }\n  }\n\n  /*\n    Add a new item to the inventory. POST\n   */\n   postOne(req: $Request, res: $Response): void {\n   const received: Produce | boolean = parseProduce(req.body);\n   const newProduce = (received) ? req.body : null;\n   if (received) {\n     newProduce.id = genId(received, inventory);\n     inventory.push(newProduce);\n     res.status(200).json({\n       status: 200,\n       message: 'Success!',\n       item: newProduce\n     });\n     // write updated inventory to the file\n     saveInventory(inventory)\n     .then((writePath) => {\n       logger(`Inventory updated. Written to:\\n\\t${path.relative(path.join(__dirname, '..', '..'), writePath)}`);\n     })\n     .catch((err) => {\n       logger('Error writing to inventory file.');\n       logger(err.stack);\n     });\n   } else {\n     res.status(400).json({\n       status: 400,\n       message: 'Bad Request. Make sure that you submit an item with a name, quantity, and price.'\n     });\n     logger('Malformed POST to /produce.');\n   }\n }\n\n\n /**\n * Update a Produce item by id. - PUT REQUEST\n */\n  updateOneById(req: $Request, res: $Response): void {\n    const searchId: number | boolean = parseId(req.params);\n    const payload: any = parseUpdate(req.body);\n    let toUpdate: Produce = inventory.find(item => item.id === searchId);\n    if (toUpdate && payload) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'quantity' || key === 'price') toUpdate[key] = Number(payload[key]);\n        else toUpdate[key] = payload[key];\n      });\n      res.json({\n        status: res.status,\n        message: 'Success!',\n        item: toUpdate\n      });\n      saveInventory(inventory)\n      .then((writePath) => {\n        logger(`Item updated. Inventory written to:\\n\\t${path.relative(path.join(__dirname, '..', '..'), writePath)}`);\n      })\n      .catch((err) => {\n        logger('Error writing to inventory file.');\n        logger(err.stack);\n      });\n    } else {\n      res.status(400).json({\n        status: res.status,\n        message: 'Update failed. Make sure the item ID and submitted fields are correct.'\n      });\n    }\n  }\n\n  /*\n    Attach route handlers to their endpoints.\n   */\n  init(): void {\n    this.router.get('/', this.getAll);\n    this.router.get('/:id', this.getById);\n    this.router.post('/', this.postOne);\n  }\n}\n"]}